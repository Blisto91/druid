on:
  push:
    branches:
      - master
  pull_request:

jobs:
  update-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - name: Generate Cargo.lock
        run: cargo generate-lockfile
        
      - id: cargo-deps
        name: Cache dependency crates
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-deps-${{ hashFiles('Cargo.lock') }}
        
      - if: steps.cargo-deps.outputs.cache-hit != 'true'
        name: Fetch dependencies
        run: cargo fetch --locked
        
      - name: Upload Cargo.lock
        uses: actions/upload-artifact@v2
        with:
          name: lockfile
          path: Cargo.lock

  test-nightly:
    needs: update-deps
    runs-on: ${{ matrix.os }}
    env:
      CARGO_INCREMENTAL: 0
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-latest]
    name: cargo test nightly
    steps:
      - uses: actions/checkout@v2

      - name: install libgtk-dev libx11-dev
        run: |
          sudo apt update
          sudo apt install libgtk-3-dev libx11-dev
        if: contains(matrix.os, 'ubuntu')

      - name: install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: lockfile
          
      - name: Restore dependency crates
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-deps-${{ hashFiles('Cargo.lock') }}

      - id: target-cache
        name: Restore target cache
        uses: actions/cache@v2
        with:
          path: target/
          key: ${{ matrix.os }}-nightly10-target-${{ hashFiles('Cargo.lock') }}

      # Test packages in deeper-to-higher dependency order
      - name: cargo test druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml --locked

      - name: cargo test druid
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --locked --features=svg,image,im

      - name: cargo test druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-derive/Cargo.toml --locked

      - name: cargo test book examples
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=docs/book_examples/Cargo.toml --locked

      # After default features are done, also perform X11 testing on Linux.
      # This is better than a separate job because common dependencies are already built.
      - name: cargo test druid-shell (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml --locked --features=x11
        if: contains(matrix.os, 'ubuntu')

      - name: cargo test druid (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --locked --features=x11
        if: contains(matrix.os, 'ubuntu')

      # Remove druid build files from target before caching
      #- name: clean druid artifacts
       # shell: pwsh
        #run: |
         # cargo clean -p druid-shell -p druid -p druid-derive
          #Remove-Item target/* -include *druid* -Recurse -Force
        #if: steps.target-cache.outputs.cache != 'true'
